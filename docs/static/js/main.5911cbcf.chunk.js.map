{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAgB5C,OACI,0BAAMC,SAVO,SAACC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCC,QAAQC,IAAI,iBACZR,EAAc,OAMV,4CAEA,2BACAS,KAAK,OACLC,MAAOX,EAEPY,SArBc,SAACT,GAEvBF,EAAcE,EAAEU,OAAOF,Y,uBCPXG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACZC,EADY,iDACoCC,UAAWH,GAD/C,+DAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAQ,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAIQ,EAAIG,cAAR,aAAI,EAAYC,iBAAiBZ,QAR1B,kBAWXM,GAXW,4CAAH,sDCCVO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAMN,IACvB,gCAAMA,KCDHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECJX,SAACA,GAAc,IAAD,EAEhBhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAJ6B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAqB1C,OAdAC,qBAAW,WACTxB,EAAQC,GACPwB,MAAK,SAAAC,GAEFC,YAAW,WACTJ,EAAU,CACNf,KAAMkB,EACNL,SAAS,MAEZ,QAEN,CAACpB,IAGGqB,EDd0BM,CAAa3B,GAAhCa,EAHyB,EAG/BN,KAAca,EAHiB,EAGjBA,QAgBlB,OAfJ3B,QAAQC,IAAI0B,GAgBJ,oCACA,wBAAIJ,UAAU,0CAA0ChB,GAEvDoB,GAAW,uBAAGJ,UAAU,yCAAb,WACpB,yBAAKA,UAAU,aAETH,EAAOJ,KAAI,SAAAC,GAAG,OACZ,kBAAC,EAAD,eACAkB,IAAKlB,EAAIC,IACJD,UEKEmB,EAtCa,WAAM,MAMG7C,mBAAS,CAAC,cANb,mBAM1B8C,EAN0B,KAMd/C,EANc,KAgB9B,OACJ,oCACI,sDACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEI+C,EAAWrB,KAAI,SAAAT,GAAQ,OAGnB,kBAAC,EAAD,CACA4B,IAAM5B,EACNA,SAAUA,UCzBtB+B,IAASC,OAEL,kBAAC,EAAD,MAIFC,SAASC,eAAe,U","file":"static/js/main.5911cbcf.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\nconst [inputValue, setinputValue] = useState('');\r\nconst handleInputChange = (e) => {\r\n   // console.log(e.target.value)\r\n    setinputValue(e.target.value)\r\n}\r\nconst handleSubmit = (e) => {\r\n     e.preventDefault();\r\n     if (inputValue.trim().length>2) {\r\n        setCategories (cats => [inputValue, ...cats]);\r\n        console.log('submit heecho');\r\n        setinputValue('');\r\n     }\r\n\r\n}\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2>Add Category</h2>\r\n            {/* <h1>{inputValue}</h1> */}\r\n            <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            // onChange={(e) => console.log(e) }\r\n            onChange={handleInputChange}\r\n            ></input>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories:  PropTypes.func.isRequired\r\n}","\r\nexport    const getGifs = async  (category) => {\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=kjvwtoZ9DmKg5XNqHXD0McpjHyVMgGlp`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n        const gifs = data.map( img => {\r\n            return  {\r\n                id: img.id,\r\n                title: img.title,\r\n                url:   img.images?.downsized_medium.url\r\n            } \r\n        });\r\n        return gifs;\r\n        //setImages(gifs);\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n//console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\" >\r\n            <img src={url} alt= {title}/>\r\n          <p>  {title}</p>\r\n        </div>\r\n    )\r\n}\r\n ","//import React, {useState, useEffect} from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from '../helpers/getGifs';\r\n// nuestro api_key\r\n// kjvwtoZ9DmKg5XNqHXD0McpjHyVMgGlp\r\nexport const GifGrid = ({category}) => {\r\n//const state =     useFetchGifs();\r\n// voy a desestructurar state \r\n const {data: images, loading} = useFetchGifs(category);\r\nconsole.log(loading);\r\n//console.log(data);\r\n    // lo pongo comentado, para continuar, era solo para dar el ejemplo de la necesidad del useEffect\r\n    //const [count, setCount] = useState(0);\r\n// const [images, setImages] = useState([]);\r\n//   useEffect( () => {\r\n//     // getGifs(category)\r\n//     //   .then(imgs => setImages(imgs));\r\n//       // aqui podemos recortar eso  y ponerla mas sencilla       Recordarán ustedes que tenemos una función que únicamente será su primer argumento Es mandado como primer argumento a la función que está aquí adentro Podríamos borrar esto y dejarlo de esta manera, y sería exactamente lo mismo\r\n//           getGifs(category)\r\n//       .then( setImages);\r\n\r\n//    }, [category]);  // ponemos category para que no dé el warning en la consola de useEffect\r\n    \r\n //getGifs();\r\n    return (\r\n        <>\r\n        <h3 className=\"card animate__animated animate__fadeIn\">{category}</h3>\r\n        {/* {loading ? 'cargando...' : 'data Cargada'} */}\r\n        {loading && <p className=\"card animate__animated animate__flash\">Loading</p>}\r\n<div className=\"card-grid\">\r\n     {\r\n      images.map(img => (\r\n        <GifGridItem\r\n        key={img.id}\r\n        { ...img}/> //   <li key={img.id}> {img.title} </li>\r\n      ))   \r\n     }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\nconst [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n});\r\n \r\nuseEffect (() => {\r\n  getGifs(category)\r\n  .then(imgs => {\r\n      // este setTimeout está de mas, es solo para mostrar el loading\r\n      setTimeout(() => {\r\n        setState ({\r\n            data: imgs,\r\n            loading: false\r\n             });\r\n      }, 0);\r\n  })   \r\n}, [category]);\r\n\r\n\r\nreturn state; // { data:[]: true}\r\n}\r\n","import React, {useState}  from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\nexport const GifExpertApp = () => {\r\n\r\n//const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n// quito la const porque no es dinamica usaremos el useState\r\n\r\n\r\n const [categories, setCategories] = useState(['One Punch']);\r\n\r\n// const handleAdd = () => {\r\n// //setCategories([...categories, 'HunterXHunter']);\r\n\r\n// // o se podria agregar asi:\r\n// // el cats es el callback de la funcions\r\n// setCategories (cats => [...cats, 'HunterXHunter' ]);\r\n// };\r\n \r\n    return (\r\n<> \r\n    <h2> GifExpertApp  de MEMS</h2>\r\n    <AddCategory setCategories={setCategories}/>\r\n    <hr></hr>\r\n{/* <button onClick={handleAdd}>Agregar</button> */}\r\n    <ol>\r\n        { \r\n        categories.map(category => \r\n            //  <li key={category }> {category}</li>\r\n            // ahora ponemos aqui el componente GifGrid\r\n            <GifGrid \r\n            key= {category}\r\n            category={category}/>   \r\n        )\r\n        }\r\n    </ol>\r\n\r\n</>\r\n);\r\n    \r\n}\r\nexport default GifExpertApp;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GifExpertApp />,\n \n    \n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n\n"],"sourceRoot":""}